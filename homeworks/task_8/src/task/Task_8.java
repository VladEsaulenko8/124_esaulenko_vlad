package task;

public class Task_8 {
    public Class<?> subtask_1_DynamicPolymorphismProgramming() {
        /*
        *   Создать в пакете task интерфейс согласно описанию:
        * -------------------------------------------------------------------------------------------
        *   Название: BattleUnit (+)
        *   Смысл: Боец в компьютерной игре
        *   Методы:
        *       String name()                   - возвращает имя персонажа (+)
        *       int health()                    - возвращает текущее здоровье (+)
        *       int maxHealth()                 - возвращает максимальное здоровье (+)
        *       void setMaxHealth(int value)    - делает значение максимального здоровья равным value (+)
        *       void heal(int value)            - восстанавливает value единиц здоровья (+)
        *       void takeDamage(int value)      - наносит value единиц урона (+)
        *       int strength()                  - возвращает текущую силу атаки (+) //TODO
        *       void setStrength(int value)     - делает текущее значение силы равным value (+)
        *       int baseStrength()              - возвращает базовую силу атаки (без учета бонусов) (+)
        *       int armor()                     - возвращает текущее значение брони (+)
        *       void restoreArmor(int value)    - восстанавливает value едуниц брони (+)
        *       void damageArmor(int value)     - сбивает value едуниц брони (+)
        *       int maxArmor()                  - возвращает максимальное значение брони (+)
        *       void setMaxArmor(int value)     - делает значение максимальной брони равным value (+) //TODO
        *
        *       void specialAbility(BattleUnit[] ownTeam, BattleUnit[]
        *           - применяет спец-способность к некоторым объектам ownTeam, enemyTeam (+)
        *       void attack(BattleUnit other)           - применяет атаку к объекту other (+)
        * ------------------------------------------------------------------------------------------
        */

        try {
            return Class.forName("task.BattleUnit");
        } catch (ClassNotFoundException e) {
            return null;
        }
    }

    public Class<?> subtask_2_DynamicPolymorphismProgramming() {
        /*
         *   Создать в пакете task абстрактный класс согласно описанию:
         * ---------------------------------------------------------------------
         *   Название: BattleUnitBase (+)
         *   Смысл: Базовая реализация бойца
         *   Реализует: BattleUnit (+)
         *   Конструктор:
         *       - принимающий в качестве параметров имя (+), макс. здоровье (+), базо-
         *         вую силу (+), макс. броню.
         *   Абстрактные методы:
         *       void specialAbility(BattleUnit[] ownTeam, BattleUnit[] enemyTeam) (+)
         *       void attack(BattleUnit other) (+)
         *   Дополнительно:
         *       - все остальные методы должны быть реализованы (+)
         *       - минимальный уровень здоровья - 0 (+)
         *       - минимальный уровень брони - 0 (+)
         *       - здоровье и броня ни в какой момент не могут быть больше
         *         максимального уровня (+)
         * ---------------------------------------------------------------------
         */

        try {
            return Class.forName("task.BattleUnitBase");
        } catch (ClassNotFoundException e) {
            return null;
        }
    }

    public Class<?> subtask_3_DynamicPolymorphismProgramming() {
        /*
         *   Создать в пакете task класс согласно описанию:
         * ---------------------------------------------------------------------
         *   Название: Infantryman (+)
         *   Смысл: Обыкновенный пехотинец
         *   Наследует: BattleUnitBase (+)
         *   Конструктор:
         *       - принимающий в качестве параметров имя (+), макс. здоровье (+), базо-
         *         вую силу, (+) макс. броню (+). Перенаправляет параметры в базовый
         *         конструктор
         *   Методы:
         *       void specialAbility(BattleUnit[] ownTeam, BattleUnit[] enemyTeam)
         *              - ничего не делает
         *
         *       void attack(BattleUnit other) - если противник в броне (+),
         *              наносит повреждения по здоровью, равные половине силы (+),
         *              и повреждения по броне равные четверти силы, (+) иначе
         *              наносит повреждения здоровью, равные силе. (+)
         *   Дополнительно:
         *       - минимальные повреждения любого типа - 1
         * ---------------------------------------------------------------------
         */
        try {
            return Class.forName("task.Infantryman");
        } catch (ClassNotFoundException e) {
            return null;
        }
    }
    public Class<?> subtask_4_DynamicPolymorphismProgramming() {
        /*
         *   Создать в пакете task класс согласно описанию:
         * ---------------------------------------------------------------------
         *   Название: ArmorDestroyer (+)
         *   Смысл: Боец, специализирующийся на расколе брони противника
         *   Наследует: BattleUnitBase
         *   Конструктор:
         *       - принимающий в качестве параметров имя, макс. здоровье, базо-
         *         вую силу, макс. броню. Перенаправляет параметры в базовый
         *         конструктор (+)
         *
         *      Методы:
         *       void specialAbility(BattleUnit[] ownTeam, BattleUnit[] enemyTeam)
         *          - выбирает живого противника с максимальной броней.
         *          Если противник в броне, наносит урон броне, равный удвоенной силе.
         *          Иначе наносит урон здоровью, равный четверти силы.
         *
         *      void attack(BattleUnit other)         - если противник в броне, (+)
         *              наносит повреждения по здоровью, равные четверти силы, (+)
         *              и повреждения по броне равные силе (+), иначе
         *              наносит повреждения здоровью, равные половине силы.
         *   Дополнительно:
         *       - минимальные повреждения любого типа - 1
         * ---------------------------------------------------------------------
         */

        try {
            return Class.forName("task.ArmorDestroyer");
        } catch (ClassNotFoundException e) {
            return null;
        }
    }
    public Class<?> subtask_5_DynamicPolymorphismProgramming() {
        /*
         *   Создать в пакете task класс согласно описанию:
         * ---------------------------------------------------------------------
         *   Название: Alchemist
         *   Смысл: Алхимик, исцеляющий союзников и дебафающий врагов
         *   Наследует: BattleUnitBase
         *   Конструктор:
         *       - принимающий в качестве параметров имя, макс. здоровье, базо-
         *         вую силу, макс. броню. Перенаправляет параметры в базовый
         *         конструктор (+)
         *   Методы:
         *       void specialAbility(BattleUnit[] ownTeam, BattleUnit[] enemyTeam)
         *            - восстанавливает 10
         *              единиц здоровья живому сокоманднику с минимальным здоровьем
         *              увеличивает силу сокомандника с максимальным здоровьем на 1.
         *              Алхимик может лечить сам себя
         *       void attack(BattleUnit other)         - уменьшает показатель
         *              силы на 2 и максимального здоровья на 4 объекта other.
         * ---------------------------------------------------------------------
         */

        try {
            return Class.forName("task.Alchemist");
        } catch (ClassNotFoundException e) {
            return null;
        }
    }
}
