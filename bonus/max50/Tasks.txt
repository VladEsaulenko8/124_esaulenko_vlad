//-----------------------------------------------------------------------------
// ВНИМАТЕЛЬНО ЧИТАЕМ УСЛОВИЕ НИЖЕ!
//-----------------------------------------------------------------------------

1. Задачи из данного блока предназначены для студентов, желающих получить мини-
   мальную проходную оценку. Если вы видите в будущем себя в сфере ИТ - ВОЗЬМИ-
   ТЕ НОРМАЛЬНОЕ ЗАДАНИЕ.
2. Выполнение задач из данного блока не гарантирует получение зачета. Сдача за-
   чета обязательна, и если на зачете вы продемонстрируете нулевой уровень зна-
   ний, решение данного блока задач вас не спасет.
3. У каждой задачи есть вес в баллах. Ваша задача набрать минимум 25 баллов.
4. Можно считать, что аргументы функции заданы корректно для вех задач.
5. Если в задаче возможны  несколько вариантов ответа, допустимо вернуть  любой
   из подходящих.
6. Все поля в классах - закрытые, все методы и конструкторы - открытые.
7. Задача Task_10 обязательна для всех, без нее балл в любом случае 0.
8. ПРАВИЛА ОФОРМЛЕНИЯ:
   - решение каждой задачи создается в отдельном проекте IDEA;
   - если вы не используете IDEA, то кода каждой задачи складываете в отдельную
     папку;
   - название проекта (или папки, если не используется IDEA) должно совпадать с
     названием задачи (название задачи идет отдельной строкой перед условием);
   - решение всех задач нужно разместить в своем репозитории по следующему пути
     <repository>/hw/bonus/max50/
	 где <repository> - это основная папка вашего репозитория (корень);
   - решения пушим в облако до 23:59 7.12.23.
   
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Задачи
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
Task_1
Создать класс Student.
В данном классе определить поля name (строка), age (целое),  group (строка),
mean_score (действительное).
Определить конструктор, задающий все поля соответствующими аргументами.
Определить методы-аксессоры на чтение и запись для всех полей.
(2 балла)
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
Task_2
Создать класс Car.
В данном классе определить поля name (строка), brand (строка),  year (целое),
total_distance (целое).
Определить конструктор, задающий все поля соответствующими аргументами.
Определить методы-аксессоры на чтение и запись для всех полей.
Определить метод trip, принимающий в качестве аргумента расстояние и увеличива-
ющий суммарный пробег на данное расстояние.
(3 балла)
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
Task_3
Создать класс Atm - банкомат.
В данном классе определить поля, описывающие число купюр разного номинала, заг-
руженных в банкомат.
Определить конструктор без параметров, задающий нулевые значения полей.
Определить методы-аксессоры на чтение для всех полей.
Определить  метод  load, принимающий  в  качестве  аргументов число загружаемых 
купюр каждого номинала. Метод увеличивает число купюр в банкомате.
Определить  метод give, принимающий в качестве аргумента сумму для выдачи. Если
сумму можно набрать, то метод уменьшает число купюр на соответствующие значения
и возвращает true, иначе возвращает false, не меняя числа купюр.
(5 баллов)
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
Task_4
Создать класс Dubler.
В классе определить метод doubling, принимающий в качестве аргумента массив це-
лых чисел и возвращающий массив целых чисел, в котором каждое вхождение элемен-
та исходного массива удвоено.
Пример:
[1, 2, 3] -> [1, 1, 2, 2, 3, 3]
(3 балла)
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
Task_5
Создать класс Counter.
В классе определить метод count, принимающий в качестве  аргумента массив целых
чисел и возвращающий HashMap<Integer, Integer>, который содержыт счетчики вхож-
дений каждого числа в массив.
Пример:
[1, 2, 3, 3, 1, 5] -> {1: 2, 2: 1, 3: 2, 5: 1}
(5 баллов)
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
Task_6
Создать класс SummCalculator.
В классе определить метод calculateSumm, принимающий два аргуманта:
HashMap<String, Integer> - словарь, где ключ - это название товара,  а значение
                         - количество единиц данного товара в покупке;
HashMap<String, Integer> - словарь, где ключ - это название товара,  а значение
                         - стоимость одной единицы товара.
Метод должен возвращать сумму всей покупки.
(5 баллов)
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
Task_7
Создать класс TimeController.
В классе определить метод getActionWithMaxTime, который принимает два аргумента
ArrayList<String> - список названий занятий
ArrayList<Integer> - список времени в минутах, потраченного  на соответствующие
                     занятия.
Метод должен вернуть название занятия с максимальным  суммарным временем.
(4 балла)
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
Task_8
Создать интерфейс BinaryOperation.
В интерфейсе  определить метод calculate, принимающий два  действительных аргу-
мента и возвращающий действительное число.
Создать классы  Summa, Difference, Multiplication, Division, реализующие данный
интерфейс соответствующим образом (как сумму, разность, умножение и деление со-
ответственно).
(4 балла)
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
Task_9
Создать класс Warrior.
В классе определить поля name (строка), attack (целое), health (целое). 
Определить конструктор, задающий все три поля.
Определить аксессоры для чтения всех трех полей.
Определить метод takeDamage, принимающий Warrior в качестве  аргумента и умень-
шающий  здоровье текущего воина на значение  атаки воина, принятого в  качестве
аргумента.
Создать класс ArmoredWarrior, наследующий Warrior.
В классе определить поле armor (целое).
Определить аксессор для чтения armor.
Определить конструктор, задающий унаследованные и вновь опеделенные поля.
Переопределить (используя @Overrode) метод takeDamage, в котором значение урона
уменьшается на значение брони воина, но при этом не может быть меньше единицы.
(5 баллов)
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
Task_10
Создать класс MyStory.
В классе определить метод getMyStory, возвращающий  строку, содержащую описание
вашего видения  своего будущего и  ответ на вопрос, почему программирование вам
не понадобится.
(1 - 10 баллов)
//-----------------------------------------------------------------------------
